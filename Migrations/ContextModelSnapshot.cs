// <auto-generated />
using System;
using ComputerHardware.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComputerHardware.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ComputerHardware.Models.CPU", b =>
                {
                    b.Property<int>("CPUId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BaseFrequency");

                    b.Property<int>("ChipsetId");

                    b.Property<int>("CoreCount");

                    b.Property<bool>("ECC");

                    b.Property<string>("Family");

                    b.Property<string>("IntegratedGraphics");

                    b.Property<double>("L3Cache");

                    b.Property<string>("Lithography");

                    b.Property<double>("MSRPPrice");

                    b.Property<int>("ManufacturerId");

                    b.Property<double>("MaxFrequency");

                    b.Property<string>("MaxGPUClockRate");

                    b.Property<string>("MaxMemory");

                    b.Property<string>("MaxMemoryChannel");

                    b.Property<string>("Name");

                    b.Property<double>("PCIExpressLanes");

                    b.Property<string>("ReleaseDate");

                    b.Property<bool>("SMT");

                    b.Property<string>("Series");

                    b.Property<int>("SocketId");

                    b.Property<int>("TDP");

                    b.Property<int>("ThreadCount");

                    b.Property<string>("Type");

                    b.HasKey("CPUId");

                    b.HasIndex("ChipsetId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SocketId");

                    b.ToTable("CPUs");

                    b.HasData(
                        new
                        {
                            CPUId = 1,
                            BaseFrequency = 3.6000000000000001,
                            ChipsetId = 1,
                            CoreCount = 8,
                            ECC = false,
                            Family = "Coffee Lake",
                            IntegratedGraphics = "",
                            L3Cache = 16.0,
                            Lithography = "14",
                            MSRPPrice = 500.0,
                            ManufacturerId = 1,
                            MaxFrequency = 5.0,
                            MaxGPUClockRate = "",
                            MaxMemory = "128",
                            MaxMemoryChannel = "2",
                            Name = "9900K",
                            PCIExpressLanes = 16.0,
                            ReleaseDate = "Q4'18",
                            SMT = true,
                            Series = "Intel Core i9",
                            SocketId = 1,
                            TDP = 95,
                            ThreadCount = 16,
                            Type = "Desktop"
                        });
                });

            modelBuilder.Entity("ComputerHardware.Models.CPUDetail", b =>
                {
                    b.Property<int>("CPUDetailId");

                    b.Property<bool?>("EnhancedIntelSpeedStepTechnology");

                    b.Property<bool?>("ExecuteDisableBit");

                    b.Property<bool?>("IdleStates");

                    b.Property<string>("InstructionSet");

                    b.Property<bool?>("Intel64");

                    b.Property<bool?>("IntelAESNewInstructions");

                    b.Property<bool?>("IntelBootGuard");

                    b.Property<bool?>("IntelHyperThreadingTechnology");

                    b.Property<bool?>("IntelIdentityProtectionTechnology");

                    b.Property<bool?>("IntelMemoryProtectionExtensions");

                    b.Property<bool?>("IntelOSGuard");

                    b.Property<bool?>("IntelOptaneMemorySupported");

                    b.Property<bool?>("IntelSoftwareGuardExtentions");

                    b.Property<bool?>("IntelTSXNI");

                    b.Property<bool?>("IntelTrustedExecutionTechnology");

                    b.Property<bool?>("IntelTurboBoostTechnology1");

                    b.Property<bool?>("IntelTurboBoostTechnology2");

                    b.Property<bool?>("IntelVirtualizationTechnologyforDirectIO");

                    b.Property<bool?>("IntelvProPlatformEligibility");

                    b.Property<int>("MaxCPUs");

                    b.Property<string>("PackageSizeX");

                    b.Property<string>("PackageSizeY");

                    b.Property<bool?>("SecureKey");

                    b.Property<bool?>("StableImagePlatformProgram");

                    b.Property<string>("TJunction");

                    b.Property<bool?>("ThermalMonitoringTechnologies");

                    b.Property<bool?>("VTxWithExtendedPageTables");

                    b.HasKey("CPUDetailId");

                    b.ToTable("CPUDetail");

                    b.HasData(
                        new
                        {
                            CPUDetailId = 1,
                            EnhancedIntelSpeedStepTechnology = true,
                            ExecuteDisableBit = true,
                            IdleStates = true,
                            InstructionSet = "64-bit",
                            Intel64 = true,
                            IntelAESNewInstructions = true,
                            IntelBootGuard = true,
                            IntelHyperThreadingTechnology = true,
                            IntelIdentityProtectionTechnology = true,
                            IntelMemoryProtectionExtensions = true,
                            IntelOSGuard = true,
                            IntelOptaneMemorySupported = true,
                            IntelSoftwareGuardExtentions = true,
                            IntelTSXNI = true,
                            IntelTrustedExecutionTechnology = true,
                            IntelTurboBoostTechnology2 = true,
                            IntelVirtualizationTechnologyforDirectIO = true,
                            IntelvProPlatformEligibility = true,
                            MaxCPUs = 1,
                            PackageSizeX = "37.5",
                            PackageSizeY = "37.5",
                            SecureKey = true,
                            StableImagePlatformProgram = true,
                            TJunction = "LGA-1151",
                            ThermalMonitoringTechnologies = true,
                            VTxWithExtendedPageTables = true
                        });
                });

            modelBuilder.Entity("ComputerHardware.Models.Chipset", b =>
                {
                    b.Property<int>("ChipsetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusSpeed");

                    b.Property<string>("DIMMsPerChannel");

                    b.Property<string>("DisplaysSupported");

                    b.Property<bool?>("IntelBootGuard");

                    b.Property<bool?>("IntelHDAudioTechnology");

                    b.Property<string>("IntelMEFirmwareVersion");

                    b.Property<bool?>("IntelOptaneMemorySupported");

                    b.Property<bool?>("IntelPlatformTTTrustTechnology");

                    b.Property<bool?>("IntelRapidStorageTechnology");

                    b.Property<bool?>("IntelRapidStorageTechnologyForPCIStorage");

                    b.Property<bool?>("IntelSmartSoundTechnology");

                    b.Property<bool?>("IntelvProPlatformEligibility");

                    b.Property<string>("LaunchDate");

                    b.Property<string>("MaxPCIExpressLanes");

                    b.Property<int>("MaxSata3Ports");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfUSBPorts");

                    b.Property<bool>("Overclock");

                    b.Property<string>("PCIExpressRevision");

                    b.Property<string>("TDP");

                    b.Property<string>("USBRevision");

                    b.HasKey("ChipsetId");

                    b.ToTable("Chipset");

                    b.HasData(
                        new
                        {
                            ChipsetId = 1,
                            BusSpeed = "8",
                            DIMMsPerChannel = "2",
                            DisplaysSupported = "3",
                            IntelBootGuard = true,
                            IntelHDAudioTechnology = true,
                            IntelMEFirmwareVersion = "12",
                            IntelOptaneMemorySupported = true,
                            IntelPlatformTTTrustTechnology = true,
                            IntelRapidStorageTechnology = true,
                            IntelRapidStorageTechnologyForPCIStorage = true,
                            IntelSmartSoundTechnology = true,
                            IntelvProPlatformEligibility = false,
                            LaunchDate = "Q4'18",
                            MaxPCIExpressLanes = "24",
                            MaxSata3Ports = 6,
                            Name = "Z390",
                            NumberOfUSBPorts = 14,
                            Overclock = true,
                            PCIExpressRevision = "3.0",
                            TDP = "6",
                            USBRevision = "3.1"
                        });
                });

            modelBuilder.Entity("ComputerHardware.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("URL");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            ManufacturerId = 1,
                            Name = "Intel Corporation",
                            URL = "https://www.intel.com/content/www/us/en/homepage.html"
                        },
                        new
                        {
                            ManufacturerId = 2,
                            Name = "Advanced Micro Devices, Inc",
                            URL = "https://www.amd.com/en"
                        });
                });

            modelBuilder.Entity("ComputerHardware.Models.Socket", b =>
                {
                    b.Property<int>("SocketId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("SocketId");

                    b.ToTable("Sockets");

                    b.HasData(
                        new
                        {
                            SocketId = 1,
                            Name = "LGA-1151"
                        },
                        new
                        {
                            SocketId = 2,
                            Name = "LGA-1150"
                        });
                });

            modelBuilder.Entity("ComputerHardware.Models.CPU", b =>
                {
                    b.HasOne("ComputerHardware.Models.Chipset", "Chipset")
                        .WithMany("CPUs")
                        .HasForeignKey("ChipsetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComputerHardware.Models.Manufacturer", "Manufacturer")
                        .WithMany("CPUs")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComputerHardware.Models.Socket", "Socket")
                        .WithMany("CPUs")
                        .HasForeignKey("SocketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComputerHardware.Models.CPUDetail", b =>
                {
                    b.HasOne("ComputerHardware.Models.CPU", "CPU")
                        .WithOne("CPUDetail")
                        .HasForeignKey("ComputerHardware.Models.CPUDetail", "CPUDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
